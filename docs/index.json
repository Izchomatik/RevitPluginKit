{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Online Documentation for the RevitPluginKit API | RevitPluginKit Documentation",
    "keywords": "Online Documentation for the RevitPluginKit API Use the table of content to navigate through the documentation To GitHub page RevitPluginKit tests project"
  },
  "api/RevitPluginKit.Collectors.ElementsCollector.html": {
    "href": "api/RevitPluginKit.Collectors.ElementsCollector.html",
    "title": "Class ElementsCollector | RevitPluginKit Documentation",
    "keywords": "Class ElementsCollector A class containing methods for quickly finding elements in the Revit model. Supports both collection of element types and collection of element instances. Inheritance System.Object ElementsCollector Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Collectors Assembly : RevitPluginKit.dll Syntax public class ElementsCollector Methods | Improve this Doc View Source InstancesByCategory<T>(Document, BuiltInCategory, String, String, List<ElementId>, Boolean, ElementDesignOptionFilter) Collect Revit model element instances by category. Declaration public static List<T> InstancesByCategory<T>(Document document, BuiltInCategory category, string familyName = null, string typeName = null, List<ElementId> levelIdsToFilterBy = null, bool useOptionFilter = true, ElementDesignOptionFilter optionFilter = null) Parameters Type Name Description Autodesk.Revit.DB.Document document Current revit document instance. It is possible to pass any document loaded to the current model (to search for elements in the specified document). Autodesk.Revit.DB.BuiltInCategory category Revit BuiltIn category to collect. Example: BuiltInCategory.OST_Walls . System.String familyName Optional parameter: if necessary, specify the name of the family of the elements to be collected. System.String typeName Optional parameter: if necessary, specify the type name of the elements to be collected. System.Collections.Generic.List < Autodesk.Revit.DB.ElementId > levelIdsToFilterBy Optional parameter: if necessary, specify list of level ids of the elements to be collected. System.Boolean useOptionFilter Optional parameter: indicate whether it is necessary to use an option filter. Autodesk.Revit.DB.ElementDesignOptionFilter optionFilter Optional parameter: specify option filter. If useOptionFilter == true and optionFilter == null => items from the currently active option will be collected. Returns Type Description System.Collections.Generic.List <T> Returns the list of Revit elements (Element). Type Parameters Name Description T Revit category (For example: Element). | Improve this Doc View Source TypesByCategory<T>(Document, BuiltInCategory, String, String) Collect Revit model element types by category. Declaration public static List<T> TypesByCategory<T>(Document document, BuiltInCategory category, string familyName = null, string typeName = null) Parameters Type Name Description Autodesk.Revit.DB.Document document Current revit document instance. Autodesk.Revit.DB.BuiltInCategory category Revit BuiltIn category to collect. System.String familyName Optional parameter: if necessary, specify the name of the family of the elements to be collected. System.String typeName Optional parameter: if necessary, specify the type name of the elements to be collected. Returns Type Description System.Collections.Generic.List <T> Returns the list of Revit elements (Element). Type Parameters Name Description T Revit category (For example: Element)."
  },
  "api/RevitPluginKit.Collectors.html": {
    "href": "api/RevitPluginKit.Collectors.html",
    "title": "Namespace RevitPluginKit.Collectors | RevitPluginKit Documentation",
    "keywords": "Namespace RevitPluginKit.Collectors Classes ElementsCollector A class containing methods for quickly finding elements in the Revit model. Supports both collection of element types and collection of element instances."
  },
  "api/RevitPluginKit.Converters.html": {
    "href": "api/RevitPluginKit.Converters.html",
    "title": "Namespace RevitPluginKit.Converters | RevitPluginKit Documentation",
    "keywords": "Namespace RevitPluginKit.Converters Classes MetricConverter Class for converting values from metric to imperial and vice versa. StringConverter Class for converting and formatting string values."
  },
  "api/RevitPluginKit.Converters.MetricConverter.html": {
    "href": "api/RevitPluginKit.Converters.MetricConverter.html",
    "title": "Class MetricConverter | RevitPluginKit Documentation",
    "keywords": "Class MetricConverter Class for converting values from metric to imperial and vice versa. Inheritance System.Object MetricConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Converters Assembly : RevitPluginKit.dll Syntax public class MetricConverter Methods | Improve this Doc View Source FeetToMM(Double) Convert feet to millimeters. Declaration public static double FeetToMM(double feet) Parameters Type Name Description System.Double feet Feet value. Returns Type Description System.Double Return millimeters. | Improve this Doc View Source MMToFeet(Double) Convert millimeters to feet. Declaration public static double MMToFeet(double millimeters) Parameters Type Name Description System.Double millimeters Millimeters value. Returns Type Description System.Double Return feets. | Improve this Doc View Source SquareFeetToSquareMeters(Double) Convert square feet to square meters. Declaration public static double SquareFeetToSquareMeters(double squareFeet) Parameters Type Name Description System.Double squareFeet Square feet value. Returns Type Description System.Double Return square meters. | Improve this Doc View Source SquareMetersToSquareFeet(Double) Convert square meters to square feet. Declaration public static double SquareMetersToSquareFeet(double squareMeters) Parameters Type Name Description System.Double squareMeters Square meters value. Returns Type Description System.Double Return square feets."
  },
  "api/RevitPluginKit.Converters.StringConverter.html": {
    "href": "api/RevitPluginKit.Converters.StringConverter.html",
    "title": "Class StringConverter | RevitPluginKit Documentation",
    "keywords": "Class StringConverter Class for converting and formatting string values. Inheritance System.Object StringConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Converters Assembly : RevitPluginKit.dll Syntax public class StringConverter Methods | Improve this Doc View Source StopwatchToString(Stopwatch) Convert stopwatch to string. Declaration public static string StopwatchToString(Stopwatch stopwatch) Parameters Type Name Description System.Diagnostics.Stopwatch stopwatch System stopwatch value. Returns Type Description System.String Return formatted string."
  },
  "api/RevitPluginKit.Ui.ButtonSettings.html": {
    "href": "api/RevitPluginKit.Ui.ButtonSettings.html",
    "title": "Class ButtonSettings | RevitPluginKit Documentation",
    "keywords": "Class ButtonSettings A class for storing data needed to generate a button instance. Inheritance System.Object ButtonSettings PullDownButtonSettings PushButtonSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class ButtonSettings Properties | Improve this Doc View Source ImageAddress Gets button image storage address. Declaration public string ImageAddress { get; } Property Value Type Description System.String | Improve this Doc View Source InternalName Gets internal button name data. Declaration public string InternalName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Gets public button name data. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Tooltip Gets public button tooltip data. Declaration public string Tooltip { get; } Property Value Type Description System.String"
  },
  "api/RevitPluginKit.Ui.html": {
    "href": "api/RevitPluginKit.Ui.html",
    "title": "Namespace RevitPluginKit.Ui | RevitPluginKit Documentation",
    "keywords": "Namespace RevitPluginKit.Ui Classes ButtonSettings A class for storing data needed to generate a button instance. ImageKit Services for working with images. PullDownButtonSettings A class for storing data needed to generate a pull down button instance. PushButtonSettings A class for storing data needed to generate a push button instance. RibbonKit Services for working with Revit plug-in ribbon tabs. RibbonPanelSettings A class for storing data needed to generate a ribbon panel."
  },
  "api/RevitPluginKit.Ui.ImageKit.html": {
    "href": "api/RevitPluginKit.Ui.ImageKit.html",
    "title": "Class ImageKit | RevitPluginKit Documentation",
    "keywords": "Class ImageKit Services for working with images. Inheritance System.Object ImageKit Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class ImageKit Methods | Improve this Doc View Source GetResourceImage(String) Image extractor. Read specific resource image using address string. Declaration public static BitmapImage GetResourceImage(string uriString) Parameters Type Name Description System.String uriString The Uri address in the solution where the image is located. Returns Type Description System.Windows.Media.Imaging.BitmapImage Return BitmapImage instance."
  },
  "api/RevitPluginKit.Ui.PullDownButtonSettings.html": {
    "href": "api/RevitPluginKit.Ui.PullDownButtonSettings.html",
    "title": "Class PullDownButtonSettings | RevitPluginKit Documentation",
    "keywords": "Class PullDownButtonSettings A class for storing data needed to generate a pull down button instance. Inheritance System.Object ButtonSettings PullDownButtonSettings Inherited Members ButtonSettings.InternalName ButtonSettings.Name ButtonSettings.Tooltip ButtonSettings.ImageAddress System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class PullDownButtonSettings : ButtonSettings Constructors | Improve this Doc View Source PullDownButtonSettings(String, String, String, String, List<PushButtonSettings>) Initializes a new instance of the PullDownButtonSettings class. Declaration public PullDownButtonSettings(string internalName, string name, string tooltip, string imageAddress, List<PushButtonSettings> pushButtonsSettings) Parameters Type Name Description System.String internalName Internal button name data. System.String name Button name data. System.String tooltip Button tooltip data. System.String imageAddress Button image storage address. System.Collections.Generic.List < PushButtonSettings > pushButtonsSettings A list of child push button instances for the current parent pull down button. Properties | Improve this Doc View Source PushButtonsSettings Gets a list of child push button instances for the current parent pull down button. Declaration public List<PushButtonSettings> PushButtonsSettings { get; } Property Value Type Description System.Collections.Generic.List < PushButtonSettings >"
  },
  "api/RevitPluginKit.Ui.PushButtonSettings.html": {
    "href": "api/RevitPluginKit.Ui.PushButtonSettings.html",
    "title": "Class PushButtonSettings | RevitPluginKit Documentation",
    "keywords": "Class PushButtonSettings A class for storing data needed to generate a push button instance. Inheritance System.Object ButtonSettings PushButtonSettings Inherited Members ButtonSettings.InternalName ButtonSettings.Name ButtonSettings.Tooltip ButtonSettings.ImageAddress System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class PushButtonSettings : ButtonSettings Constructors | Improve this Doc View Source PushButtonSettings(String, String, String, String, String) Initializes a new instance of the PushButtonSettings class. Declaration public PushButtonSettings(string internalName, string name, string tooltip, string imageAddress, string className) Parameters Type Name Description System.String internalName Internal button name data. System.String name Button name data. System.String tooltip Button tooltip data. System.String imageAddress Button image storage address. System.String className The name of the class to call when the button is clicked. Properties | Improve this Doc View Source ClassName Gets main button function to call. Declaration public string ClassName { get; } Property Value Type Description System.String"
  },
  "api/RevitPluginKit.Ui.RibbonKit.html": {
    "href": "api/RevitPluginKit.Ui.RibbonKit.html",
    "title": "Class RibbonKit | RevitPluginKit Documentation",
    "keywords": "Class RibbonKit Services for working with Revit plug-in ribbon tabs. Inheritance System.Object RibbonKit Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class RibbonKit Methods | Improve this Doc View Source AddRibbonTab(UIControlledApplication, String, List<RibbonPanelSettings>) Adds a revit plug-in ribbon tab. Declaration public static void AddRibbonTab(UIControlledApplication application, string tabName, List<RibbonPanelSettings> panelsSettings) Parameters Type Name Description Autodesk.Revit.UI.UIControlledApplication application Current revit application instance. System.String tabName New revit plug-in tab name. System.Collections.Generic.List < RibbonPanelSettings > panelsSettings List of RibbonPanelData class instances required to generate ribbon panels and its buttons."
  },
  "api/RevitPluginKit.Ui.RibbonPanelSettings.html": {
    "href": "api/RevitPluginKit.Ui.RibbonPanelSettings.html",
    "title": "Class RibbonPanelSettings | RevitPluginKit Documentation",
    "keywords": "Class RibbonPanelSettings A class for storing data needed to generate a ribbon panel. Inheritance System.Object RibbonPanelSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Ui Assembly : RevitPluginKit.dll Syntax public class RibbonPanelSettings Constructors | Improve this Doc View Source RibbonPanelSettings(String, List<ButtonSettings>) Initializes a new instance of the RibbonPanelSettings class. Contains basic information needed to generate the ribbon panel. Includes information about the buttons that the ribbon panel should contain. Declaration public RibbonPanelSettings(string name, List<ButtonSettings> buttonsSettings) Parameters Type Name Description System.String name Ribbon panel name (visible to the user). System.Collections.Generic.List < ButtonSettings > buttonsSettings List of ButtonSettings class instances required to generate ribbon panel buttons. Properties | Improve this Doc View Source ButtonsSettings Gets list of ButtonSettings class instances required to generate ribbon panel buttons. Declaration public List<ButtonSettings> ButtonsSettings { get; } Property Value Type Description System.Collections.Generic.List < ButtonSettings > | Improve this Doc View Source Name Gets panel name data. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/RevitPluginKit.Validators.html": {
    "href": "api/RevitPluginKit.Validators.html",
    "title": "Namespace RevitPluginKit.Validators | RevitPluginKit Documentation",
    "keywords": "Namespace RevitPluginKit.Validators Classes NumberValidator Number validator class."
  },
  "api/RevitPluginKit.Validators.NumberValidator.html": {
    "href": "api/RevitPluginKit.Validators.NumberValidator.html",
    "title": "Class NumberValidator | RevitPluginKit Documentation",
    "keywords": "Class NumberValidator Number validator class. Inheritance System.Object NumberValidator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : RevitPluginKit.Validators Assembly : RevitPluginKit.dll Syntax public class NumberValidator Methods | Improve this Doc View Source NumberValidation(Object, TextCompositionEventArgs) Number validation method for wpf textBox. Declaration public static void NumberValidation(object sender, TextCompositionEventArgs e) Parameters Type Name Description System.Object sender Sender object. System.Windows.Input.TextCompositionEventArgs e Text composition event."
  },
  "articles/about.html": {
    "href": "articles/about.html",
    "title": "About project | RevitPluginKit Documentation",
    "keywords": "About project Description RevitPluginKit is a set of tools and utilities designed to simplify the creation of a custom plug-in for the Autodesk Revit program. The library is intended primarily to simplify work with Revit api and standardize the processes associated with the preparation of a custom plugin for the Revit program. RevitPluginKit provides tools for convenient \"Revit\" ribbon panel generation, feature sets such as fast and simple model elements collectors, set of converters, validators and many other tools. Project goals Simplify and accelerate interactions with the \"Revit API\" through a dedicated tools library Building and Maintaining an Efficient Custom Plugin Creation Template Internal standardization of the process of preparing a custom plug-in for \"Revit\" Efficient testing of the basic functions of a custom plugin Collecting the best (hopefully) practices Versions The library has been tested in \"Revit\" versions: 2019 2020 2021"
  },
  "articles/building.html": {
    "href": "articles/building.html",
    "title": "Building | RevitPluginKit Documentation",
    "keywords": "Building Work in progress."
  },
  "articles/collectors.html": {
    "href": "articles/collectors.html",
    "title": "Collectors | RevitPluginKit Documentation",
    "keywords": "Collectors Description A set of utilities and functions designed for quick and easy collection of various elements located in one of the instances of the \"Revit\" model or document. Collectors Api documentation Namespace: RevitPluginKit.Collectors Note The most convenient way to use collectors - is with a using declaration: using RevitPluginKit.Collectors; Feature usage scenarios Collection of generic entities such as documents, link instances etc. Collection of basic entities such as levels, grids, styles etc. Collection of internal entities - such as views, sheets, schedules etc. Collection of element types based on user parameters - for subsequent specific processing Collection of element instances based on user parameters - for subsequent specific processing Instance collector Use the element instance collector by \"Revit\" Category ( ElementsCollector.InstancesByCategory<T> ) to collect specific element instances. Example code snippet for collecting all door elements in the current model: List<Element> doors = ElementsCollector.InstancesByCategory<Element>( document: document, category: BuiltInCategory.OST_Doors); Example code snippet for collecting floor elements in the current model, in defined option, with the given family name, with the given type name, on required level: List<Floor> testFloors = ElementsCollector.InstancesByCategory<Floor>( document: document, category: BuiltInCategory.OST_Floors, optionFilter: optionFilter, familyName: \"floorFamilyName\", typeName: \"floorTypeName\", levelIdsToFilterBy: new List<ElementId>() { levelId }); Type collector Use the element type collector by \"Revit\" Category ( ElementsCollector.TypesByCategory<T> ) to collect specific element types. Example code snippet for collecting all door types in the current model: List<Element> testTypes = ElementsCollector.TypesByCategory<Element>( document: document, category: BuiltInCategory.OST_Doors); Example code snippet for collecting floor types in the current model, with the given family name: List<Floor> testFloors = ElementsCollector.InstancesByCategory<Floor>( document: document, category: BuiltInCategory.OST_Floors, familyName: \"floorFamilyName\");"
  },
  "articles/quickStartGuide.html": {
    "href": "articles/quickStartGuide.html",
    "title": "Quick start guide | RevitPluginKit Documentation",
    "keywords": "Quick start guide Add Revit plug-in ribbon tab Find the starter class where the base interface IExternalApplication for your plugin is defined. In OnStartup method implemented by IExternalApplication add 'AddRibbonTab' method, defined in RevitPluginKit.Ui.RibbonKit . When your plugin is initialized during the start of the Revit session, this method will add a ribbon tab to the Revit upper working panel. Detailed UI Api documentation Note The most convenient way to use UI library - is with a using declaration: using static RevitPluginKit.Ui.RibbonKit; You can call this method multiple times to create multiple ribbon tabs. Example code snippet: namespace RevitPluginKitTemplate { using System.Collections.Generic; using Autodesk.Revit.UI; using RevitPluginKit.Ui; using static RevitPluginKit.Ui.RibbonKit; /// <summary> /// Main plug-in entry point. /// </summary> public class PluginMain : IExternalApplication { /// <inheritdoc/> public Result OnShutdown(UIControlledApplication application) { return Result.Succeeded; } /// <inheritdoc/> public Result OnStartup(UIControlledApplication application) { AddRibbonTab( application: application, tabName: \"Plug-in tab\", panelsSettings: new List<RibbonPanelSettings>()); return Result.Succeeded; } } } As a result, you will see in Revit: Add Revit plug-in ribbon panel to ribbon tab Edit previously instantiated List<RibbonPanelSettings>() by adding your first ribbon panel data to the previously created ribbon tab. The RibbonPanelSettings class is data transfer object responsible for defining the revit ribbon panel. You can add multiple panels to the current ribbon tab. Modified code snippet: AddRibbonTab( application: application, tabName: \"Plug-in tab\", panelsSettings: new List<RibbonPanelSettings>() { new RibbonPanelSettings( name: \"Test panel\", buttonsSettings: new List<ButtonSettings>()), }); As a result, you will see in Revit: Add Revit plug-in push button to panel Edit previously instantiated List<ButtonSettings>() by adding your first push button settings ( PushButtonSettings ) to the previously created ribbon panel. The PushButtonSettings class is data transfer object responsible for defining the revit push button. You can add multiple push buttons to the current ribbon panel. Modified code snippet: AddRibbonTab( application: application, tabName: \"Plug-in tab\", panelsSettings: new List<RibbonPanelSettings>() { new RibbonPanelSettings( name: \"Test panel\", buttonsSettings: new List<ButtonSettings>() { new PushButtonSettings( internalName: \"buttonName\", name: \"Button\\nname\", tooltip: \"Button tooltip\", imageAddress: \"RevitPluginKitTemplate.assets.icons.TestIcon.png\", className: \"RevitPluginKitTemplate.Src.TestClass\"), }), }); As a result, you will see in Revit: Add Revit plug-in pull down button to panel Edit previously instantiated List<ButtonSettings>() by adding your first pull down button settings ( PullDownButtonSettings ) to the previously created ribbon panel. The PullDownButtonSettings class is data transfer object responsible for defining the revit pull down button. You can add multiple pull down buttons to the current ribbon panel. Modified code snippet: AddRibbonTab( application: application, tabName: \"Plug-in tab\", panelsSettings: new List<RibbonPanelSettings>() { new RibbonPanelSettings( name: \"Test panel\", buttonsSettings: new List<ButtonSettings>() { new PullDownButtonSettings( internalName: \"pullDownButtonName\", name: \"Pull down\\nbutton name\", tooltip: \"Pull down button tooltip\", imageAddress: \"RevitPluginKitTemplate.assets.icons.TestIcon.png\", pushButtonsSettings: new List<PushButtonSettings>() { new PushButtonSettings( internalName: \"buttonName1\", name: \"Button\\nname 1\", tooltip: \"Button tooltip 1\", imageAddress: \"RevitPluginKitTemplate.assets.icons.TestIcon.png\", className: \"RevitPluginKitTemplate.Src.TestClass\"), new PushButtonSettings( internalName: \"buttonName2\", name: \"Button\\nname 2\", tooltip: \"Button tooltip 2\", imageAddress: \"RevitPluginKitTemplate.assets.icons.TestIcon.png\", className: \"RevitPluginKitTemplate.Src.TestClass\"), }), }), }); As a result, you will see in Revit: Next steps Next, try adding any other instrument from this library to your plugin! For example, try using the element collector to quickly and easily collect elements in the test model."
  },
  "articles/utilityTools.html": {
    "href": "articles/utilityTools.html",
    "title": "Utility tools | RevitPluginKit Documentation",
    "keywords": "Utility tools Description A set of various tools designed to simplify the work with Revit API. At the moment, the following categories of utility tools are distinguished: Converters Validators Converter tools A set of tools designed for simple value conversions. Converters Api documentation Namespace: RevitPluginKit.Converters Supports conversions between metric and imperial units. Supports string conversions Note The most convenient way to use converters - is with a using declaration: using RevitPluginKit.Converters; Example code snippet for converting 10 Square Feet to Square Meters: double squareMeters = MetricConverter.SquareFeetToSquareMeters(squareFeet: 10); Example code snippet for converting 1000 millimeters to feet: double feet = MetricConverter.MMToFeet(millimeters: 1000); Validator tools A set of tools designed to validate values. Validators Api documentation Namespace: RevitPluginKit.Validators WPF validation of an input value as being a number is supported. Note The most convenient way to use validators - is with a using declaration: using RevitPluginKit.Validators;"
  },
  "index.html": {
    "href": "index.html",
    "title": "| RevitPluginKit Documentation",
    "keywords": "#RevitPluginKit Get started"
  }
}